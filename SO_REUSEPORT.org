#+TITLE: 属性SO_REUSEPORT简介
#+AUTHOR: sqlfocus


SO_REUSEPORT属性在linux内核3.9之后才提供，使得同一主机上多个插口可以绑定到
相同的端口，而且内核提供负载均衡策略，从而优化并提高并发服务器的性能。


* SO_REUSEPORT提升性能?
运行在Linux系统上网络应用程序，为了利用多核的优势，一般使用多进程/多线程服
务器模型：
 - 单线程listen+accept，其他多线程接收分发任务
     : CPU的工作负载不再是问题
     : 但仍有其他瓶颈
     :    1) 单线程listener，处理高速率海量连接时，会成为瓶颈
     :    2) CPU缓存行miss套接字结构(socket structure)现象严重
 - 所有工作线程都accept()在同一个服务器套接字上
     : 多线程访问server socket锁竞争严重
     : 高负载下，线程之间处理不均衡；导致核数增加，性能并没有提升
     : 导致CPU缓存行跳跃(cache line bouncing)
     : 繁忙CPU存在较大延迟

** SO_REUSEPORT原理
The new socket option allows multiple sockets on the same host to bind 
to the same port, and is intended to improve the performance of 
multithreaded network server applications running on top of multicore 
systems.

SO_REUSEPORT支持多个进程或者线程绑定到同一端口，提高服务器程序的性能，解决
了以下问题：
  - 允许多个套接字bind()/listen()同一个TCP/UDP端口
  - 每一个线程拥有自己的服务器套接字
  - 在服务器套接字上没有了锁的竞争
  - 内核层面实现负载均衡
  - 安全层面，监听同一个端口的套接字只能位于同一个用户下面

** nginx配置
  #+BEGIN_EXAMPLE
  events {
      accept_mutex off;
  }

  http {
     server {
         listen 80 reuseport;
     }
  }
  #+END_EXAMPLE

* 内核实现
linux核心的实现主要有三点：
  - 扩展socket option
      : 增加SO_REUSEPORT选项
  - 修改bind系统调用实现
      : 支持可以绑定到相同的IP和端口
  - 修改处理新建连接的实现
      : 查找listener时，在监听相同IP和端口的多个sock之间均衡选择

** setsockopt()
  #+BEGIN_EXAMPLE
  -SYSCALL_DEFINE5(setsockopt,,,,,,)                   入口，~/net/socket.c
    -sock_setsockopt()
      -设置struct socket->sk->sk_reuseport             =0/1, 设置插口属性值，~/net/core/sock.c
  #+END_EXAMPLE

** bind()
ab

** listen()
ab

** accept()
ab

* 参考
  - [[http://www.blogjava.net/yongboy/archive/2015/02/12/422893.html?utm_source=tuicool&utm_medium=referral][SO_REUSEPORT学习笔记]]
  - [[http://m.blog.chinaunix.net/uid-10167808-id-3807060.html][多个进程绑定相同端口的实现分析]]


