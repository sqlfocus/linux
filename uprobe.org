#+TITLE: 摘录uprobe的内核实现
#+AUTHOR: sqlfocus


本文档主要摘录uprobe在内核中的实现，以期更深入理解动态调试技术；也可以为
安全理念提供参考。

* 简介
类似于kprobe，内核提供的用户态程序跟踪的标准接口

* 应用
** 内核态
无直接支持

** 应用态
类似于kprobe，借助于trace events，uprobe可以方便的实现用户态程序跟踪。
 - 添加跟踪点
   : /sys/kernel/debug/tracing/uprobe_events
   :
   : p[:[GRP/]EVENT] PATH:OFFSET [FETCHARGS]   添加探测点
   : r[:[GRP/]EVENT] PATH:OFFSET [FETCHARGS]   添加返回探测点
   : -:[GRP/]EVENT                             清理探测点
   :
   : GRP         组名，默认"uprobes"
   : EVENT       事件名，默认SYM+offs
   : PATH        可执行文件或库路径
   : OFFSET      定义uprobe插入点偏移(objdump -T ${program.bin.name} | grep -w ${probe.name})
   : FETCHARGS	 参数Arguments
   :   %REG	        获取寄存器REG
   :   @ADDR		获取内存值ADDR
   :   @+OFFSET	        获取偏移处内存值
   :   $stackN	        获取堆栈Nth
   :   $stack	        获取堆栈地址
   :   $retval	        获取返回值
   :   $comm		获取当前任务命令
   :   +|-offs(FETCHARG)获取内存值FETCHARG +|- offs
   :   NAME=FETCHARG    设置参数名
   :   FETCHARG:TYPE    设置参数类型 
   :                    (u8/u16/u32/u64/s8/s16/s32/s64), hexadecimal types
   :                    (x8/x16/x32/x64), "string" and bitfield are supported
 - 使能
    : /sys/kernel/debug/tracing/events/uprobes/<EVENT>/enabled
 - 查看命中/命中未处理(hit/miss-hit)统计结果
    : /sys/kernel/debug/tracing/uprobe_profile
    :   event name | number of probe hits | number of probe miss-hits
 - 查看跟踪结果
   : cat /sys/kernel/debug/tracing/trace 

* 执行流程
执行流程类似于kprobe，不过探测点处理句柄的执行不是在int3/单步异常处理流
程中；而是在返回用户态程序之前的处理流程。

** 代码摘录
 - init_uprobes()
    : ~/kernel/events/uprobes.c
    : UPROBE模块儿的初始化函数
    :
    : 流程
    :   register_die_notifier()         注册异常处理句柄到die_chain
 - uprobe_register()
    : ~/kernel/events/uprobes.c
    : 注册监控点
    :
    : 流程
    :   alloc_uprobe()                  分配struct uprobe，添加到全局红黑树uprobes_tree
    :   __uprobe_register()
    :      register_for_each_vma()
    :         install_breakpoint()      替换探测点为int3指令
 - arch_uprobe_exception_notify()
    : ~/kernel/events/uprobes.c
    : 对应die_chain链的异常处理
    :
    : 流程
    :   uprobe_pre_sstep_notifier()     处理int3异常
    :   uprobe_post_sstep_notifier()    处理单步执行异常
 - uprobe_notify_resume()
    : ~/kernel/events/uprobes.c
    : 中断处理完毕，返回用户态的处理过程中，如果设置了TIF_UPROBE，执行此函数
    : 被prepare_exit_to_usermode()->exit_to_usermode_loop()调用
    :
    : 流程
    :   clear_thread_flag()             清理标识
    :   handle_singlestep()             单步异常，清理单步执行；恢复用户态流程
    :   handle_swbp()                   int3异常
    :     handler_chain()               执行探测点句柄
    :     pre_ssout()                   单步执行

* 参考
 - ~/Documentation/trace/uprobetracer.txt






